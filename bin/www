#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('parserlog:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

const fs = require('fs');
const _ = require('lodash');
const moment = require('moment');
const axios = require('axios');
const path = require('path');

let date_prev = moment().format('YYYYMMDD');
let date_now = moment().format('YYYYMMDD');
let prev_str = readLastBlock();

(() => {
    setInterval(() => {
        date_now = moment().format('YYYYMMDD');
        if (date_now !== date_prev) {
            date_prev = date_now;
            prev_str = readLastBlock();
            watch();
        }
    }, 1000 * 60);

    watch();
    axios.get(process.env.LINK_SELL).then(() => {
        console.log('init send');
    });
})();

function readLastBlock() {
    let jsonPath = path.join(__dirname, '..', '../Logs', '' + date_now + '.log');
    if (fs.existsSync(jsonPath)) {
        return fs.readFileSync(jsonPath, 'utf8');
    } else {
        return '';
    }

}

function cBack(curr, prev) {
    console.log("current mtime: " + curr.mtime);
    console.log("previous mtime: " + prev.mtime);
    if (curr.mtime.getTime() === prev.mtime.getTime()) {
        console.log("mtime equal");
    } else {
        console.log("mtime not equal");
        let arr_prev_str = prev_str.split('\r\n');
        let next_prev_str = readLastBlock().split('\r\n');

        let diff = _.xor(arr_prev_str, next_prev_str).filter(item => item !== '');
        prev_str = readLastBlock();

        let reg = new RegExp('Connors RSI Alerts v1_1');

        diff.map(async (item) => {
            if (reg.test(item)) {
                let reg_sell = new RegExp('sell');
                let reg_buy = new RegExp('buy');
                if (reg_sell.test(item.toLowerCase())) {
                    await axios.get(process.env.LINK_SELL);
                    console.log('send sell');
                }
                if (reg_buy.test(item.toLowerCase())) {
                    await axios.get(process.env.LINK_BUY);
                    console.log('send buy')
                }
            }
        })
    }

}

function watch() {
    console.log('Watch ' + date_now);
    let jsonPath = path.join(__dirname, '..', '../Logs', '' + date_now + '.log');

    if (fs.existsSync(jsonPath)) {
        fs.watchFile(jsonPath, cBack);
    } else {
        setTimeout(watch, 1000 * 60 * 5)
    }

}
